//#########################################################
//
// ./docker-compose.prod.yml
//
//*********************************************************
services:
  app1:
    build:
      context: ./next-app/
      dockerfile: Dockerfile
    container_name: nextjs_app1
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    ports:
      - "3001:3000" # 호스트 3001 포트를 컨테이너 3000 포트에 매핑
    networks:
      - webapps_network

networks:
  webapps_network:
    driver: bridge


// next-app/.dockerignore
node_modules
.next
npm-debug.log
README.md
.env*.local
.git

//#########################################################
//
// ./app1/.prlistignore
//
//*********************************************************
.git
*.pyc
__pycache__
node_modules
*.css
#.prlistignore
.next
public
package-lock.json
README.md

//#########################################################
//
// ./app1/next-app/.dockerignore
//
//*********************************************************
node_modules
.next
npm-debug.log
README.md
.env*.local
.git


//#########################################################
//
// ./app1/next-app/Dockerfile
//
//*********************************************************
# 1. 기본 이미지 설정 (Node.js 버전은 프로젝트 요구사항에 맞게 조정)
FROM node:20-alpine AS base

# 2. 작업 디렉토리 설정
WORKDIR /app

# 3. 의존성 설치 단계 (빌드 속도 향상을 위해 분리)
FROM base AS deps
COPY package.json package-lock.json* ./
RUN npm install --frozen-lockfile

# 4. 빌드 단계
FROM base AS builder
COPY --from=deps /app/node_modules ./node_modules
COPY . .
# Next.js 앱 빌드 (환경 변수 설정이 필요하면 여기에 추가)
RUN npm run build

# 5. 프로덕션 실행 단계
FROM base AS runner
WORKDIR /app

# 프로덕션 환경 설정
ENV NODE_ENV=production
# basePath는 next.config.mjs에서 설정되므로 여기서는 불필요

# 빌드 결과물 복사
COPY --from=builder /app/public ./public
# Next.js는 standalone 출력을 권장하기도 합니다. 그 경우 복사 대상이 달라집니다.
# .next/standalone 폴더를 사용하는 경우:
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static

# 일반적인 .next 폴더를 사용하는 경우: Standalone 사용 시 불필요
#COPY --from=builder /app/.next ./.next
#COPY --from=builder /app/node_modules ./node_modules
#COPY --from=builder /app/package.json ./package.json

# 애플리케이션 실행 포트 노출 (컨테이너 내부 포트)
EXPOSE 3000

# 애플리케이션 실행 명령어 (package.json의 "start" 스크립트 사용)
# CMD ["npm", "start"]
# standalone 사용 시:
CMD ["node", "server.js"]


//#########################################################
//
// ./app1/next-app/eslint.config.mjs
//
//*********************************************************
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;


//#########################################################
//
// ./app1/next-app/next-env.d.ts
//
//*********************************************************
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.


//#########################################################
//
// ./app1/next-app/next.config.ts
//
//*********************************************************
import type { NextConfig } from "next";
import createNextPwa from "next-pwa";

const basePath = process.env.NODE_ENV === 'production' ? '/app1' : '';
process.env.NEXT_PUBLIC_BASE_PATH = basePath;

let nextConfig: NextConfig = {
  /* config options here */
  output: 'standalone',
  basePath : process.env.NODE_ENV === 'production' ? '/app1' : '',
  // assetPrefix : process.env.NODE_ENV === 'production' ? '/app1' : '',
};

console.log('basePath in next.config.ts : ', nextConfig.basePath)
console.log('NODE_ENV in next.config.ts : ', process.env.NODE_ENV)

// PWA 설정 추가 (개발 중에는 비활성화하는 것이 일반적)
if (process.env.NODE_ENV === "production") {
  const withPWA = createNextPwa({
    dest: "public", // 서비스 워커 및 관련 파일 출력 위치
    register: true, // 클라이언트 측에서 서비스 워커 자동 등록
    skipWaiting: true, // 새 서비스 워커 즉시 활성화
    // disable: process.env.NODE_ENV === 'development', // 개발 모드에서 PWA 비활성화
    // scope: '/app1', // basePath가 설정되면 자동으로 처리될 수 있음, 명시적 설정 필요시 추가
    sw: "service-worker.js", // 서비스 워커 파일 이름
    // 필요한 경우 추가 PWA 옵션 설정 (예: 런타임 캐싱 전략)
  });
  nextConfig = withPWA(nextConfig);
}
export default nextConfig;


//#########################################################
//
// ./app1/next-app/package.json
//
//*********************************************************
{
  "name": "next-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbo -p 4051",
    "build": "next build",
    "start": "next start -p 4051",
    "lint": "next lint"
  },
  "dependencies": {
    "next": "15.2.4",
    "next-pwa": "^5.6.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.2.4",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}


//#########################################################
//
// ./app1/next-app/postcss.config.mjs
//
//*********************************************************
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;


//#########################################################
//
// ./app1/next-app/src/app/about/page.tsx
//
//*********************************************************
import Link from "next/link";
import Image from "next/image";
import React from "react";

const About = () => {
  return (
    <div>
      <h1 className="text-5xl text-blue-600">App1 About</h1>
      <Image src={`${process.env.NEXT_PUBLIC_BASE_PATH}/pwa-app1.jpg`} alt="Logo" width={512} height={512} />
      <Link
        href="/"
        className="text-xl bg-amber-500 hover:bg-amber-300 px-3 py-2 rounded-lg border-2"
      >
        Go Home
      </Link>
    </div>
  );
};

export default About;


// next-app/src/app/favicon.ico
// Error: Cannot decode file (binary file?)

//#########################################################
//
// ./app1/next-app/src/app/layout.tsx
//
//*********************************************************
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import Link from "next/link";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
        <Link href='/privacy'>Privacy</Link>
      </body>
    </html>
  );
}


//#########################################################
//
// ./app1/next-app/src/app/page.tsx
//
//*********************************************************
import Image from "next/image";
import Link from "next/link";

export default function Home() {
  const basePath = process.env.NEXT_PUBLIC_BASE_PATH || '';
  console.log('NEXT_PUBLIC_BASE_PATH : ', process.env.NEXT_PUBLIC_BASE_PATH)
  console.log('basePath :', basePath);
  const imageUrlString = `${basePath}/PNG_transparency_demonstration_1.png`;
  console.log('image url', imageUrlString);

  return (
    <div className="flex flex-col">
      <h1 className="text-5xl text-blue-600 p-4">App1 in the root</h1>
      <Link href="/about" className="text-xl bg-amber-500 hover:bg-amber-300 px-8 py-4 m-4 rounded-lg w-fit border-2">About</Link>
      <Image src={`${process.env.NEXT_PUBLIC_BASE_PATH}/icons/pwa-app1.jpg`} alt="Logo" width={512} height={512} />
      <div
        style={{
          backgroundImage: `url('${imageUrlString}')`,
          width: '12rem', // 48px -> rem으로 변경
          height: '12rem', // 48px -> rem으로 변경
          backgroundPosition: 'center',
          backgroundSize: 'cover',
          backgroundColor: 'rgb(253 230 138)', // amber-300 -> rgb로 변경
          padding: '1rem', // 4px -> rem으로 변경
          margin: '1rem', // 4px -> rem으로 변경
          border: '4px solid rgb(96 165 250)' // blue-400 -> rgb로 변경
        }}
      ></div>
    </div>
  );
}

//#########################################################
//
// ./app1/next-app/src/app/privacy/page.tsx
//
//*********************************************************
import React from 'react'

const Privacy = () => {
  return (
    <div className='text-3xl font-extrabold text-blue-600'>Privacy</div>
  )
}

export default Privacy

//#########################################################
//
// ./app1/next-app/tsconfig.json
//
//*********************************************************
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


//#########################################################
//
// ./app1/next-app/types/next-pwa.d.ts
//
//*********************************************************
declare module "next-pwa" {
  import { NextConfig } from "next";

  interface PWAConfig {
    dest?: string;
    register?: boolean;
    skipWaiting?: boolean;
    disable?: boolean;
    scope?: string;
    sw?: string;
  }

  function createNextPwa(config: PWAConfig): (config: NextConfig) => NextConfig;
  export default createNextPwa;
}



